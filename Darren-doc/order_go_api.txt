syntax = "proto3";

package plorderpb;     // 指定包名

import "plorder.proto";

service PLOrder{
    // Create 下单
    rpc Create(CreateReq) returns (CreateResp) {}

    // Info 获取订单信息
    rpc Info(InfoReq) returns (InfoResp) {}

    // Cancel 付款后没有大神接单取消订单
    rpc Cancel(CancelReq) returns (CancelResp) {}

    // ARCancel 大神接单后，用户取消订单，大神接受 或 拒绝取消订单
    rpc ARCancel(ARCancelReq) returns (ARCancelResp) {}

    // Grab 抢单
    rpc Grab(GrabReq) returns (GrabResp) {}

    // Lastest 用户最近一笔抢单状态
    rpc Lastest(LastestReq) returns (LastestResp) {}

    // Confirm 大神服务后用户确认完成
    rpc Confirm(ConfirmReq) returns (ConfirmResp) {}

    // Complain 申诉订单
    rpc Complain(ComplainReq) returns (ComplainResp) {}

    // Complained OM处理申诉订单
    rpc Complained(ComplainedReq) returns (ComplainedResp) {}

    // ComplainList 申诉列表
    rpc ComplainList(ComplainListReq) returns (stream ComplainListResp) {}

    // Accept 定向单接单
    rpc Accept(AcceptReq) returns (AcceptResp) {}

    // Pending 接单中心
    rpc Pending(PendingReq) returns (PendingResp) {}

    // Pending 即时约版本单池
    rpc Pendingv2(PendingReq) returns (PendingResp) {}
    
    // Switch 设置接单中心的推送开关
    rpc Switch(SwitchReq) returns (SwitchResp) {}

    // Detail 订单详情
    rpc Detail(DetailReq) returns (DetailResp) {}

    // Details 批量订单详情
    rpc Details(DetailsReq) returns (DetailsResp) {}

    // Status 订单状态,补差价状态
    rpc Status(StatusReq) returns (StatusResp) {}

    // List 接单 列表
    rpc Rlist(ListReq) returns (RListResp) {}

    // List 下单 列表
    rpc Plist(ListReq) returns (PListResp) {}

    // RList 获取接单或下单列表
    rpc Rlist2(ListReq)returns (ListResp) {}

     // PList 获取接单或下单列表
    rpc Plist2(ListReq)returns (ListResp) {}

    // Complete 服务完成上传游戏截图
    rpc Complete(CompleteReq) returns  (CompleteResp) {}

    // Completed 用户是否完成过订单
    rpc Completed(CompletedReq) returns (stream CompletedResp) {}

    // CBSuccess 订单支付成功回调
    rpc CBSuccess(CBSuccessReq) returns (stream CBSuccessResp) {}

    // CBTimeout 订单超时未支付回调
    rpc CBTimeout(CBTimeoutReq) returns (stream CBTimeoutResp) {}

    // Supplement 发起/付款 补差价
    rpc Supplement(SupplementReq) returns (SupplementResp) {}

     // Supplement 发起/付款 补差价
    rpc SupplementPay(SupplementPayReq) returns (SupplementPayResp) {}

    // SetAccount 代练设置账号
    rpc SetAccount(SetAccountReq) returns (SetAccountResp) {}

    // OMList OM后台订单列表
    rpc OMList(OMListReq) returns (stream OMListResp) {}

    // Week 大神一周接单统计
    rpc Week(WeekReq) returns (stream WeekResp) {}

    // Has 两个用户之前是否有正在进行中的单子
    rpc Has(HasReq) returns (stream HasResp) {}

    // Count 大神完成订单数
    rpc Count(CountReq) returns (stream CountResp) {}

    // Income 大神收入
    rpc Income(IncomeReq) returns (stream IncomeResp) {}

    // Free 大神是否空闲
    rpc Free(FreeReq) returns (stream FreeResp) {}

    // SortFactor 首页排序需要的数据
    rpc SortFactor(SortFactorReq) returns (stream SortFactorResp) {}

    // MeetNow 陪玩即时约下单
    rpc MeetNow(MeetNowReq) returns (MeetNowResp) {}

    // MeetStatus 陪玩即时约状态
    rpc MeetStatus(MeetStatusReq) returns (MeetStatusResp) {}

    // Meeting 获取等待大神接单界面数据
    rpc Meeting(MeetingReq) returns (MeetingResp) {}

    // Meeted 获取即时约已接单界面数据
    rpc Meeted(MeetedReq) returns (MeetedResp) {}

    // MeetGrab
    rpc MeetGrab(MeetGrabReq) returns (MeetGrabResp) {}

    // MeetPay 即时约付款
    rpc MeetPay(MeetPayReq) returns (MeetPayResp) {}

    // InHand 进行中的订单
    rpc InHand(InHandReq) returns (stream InHandResp) {}

    // Delete 软删除订单
    rpc Delete(DeleteReq) returns (DeleteResp) {}

    // Tome 给我下过单的用户
    rpc Tome(TomeReq) returns (TomeResp) {}

    // State 查支付状态
    rpc State(StateReq) returns (StateResp) {}

    // Creates 批量下陪玩单
    rpc Creates(CreatesReq) returns (CreatesResp) {}

    // Bcbsuccess 批量订单支付成功
    rpc Bcbsuccess(BcbsuccessReq) returns (stream BcbsuccessResp) {}

    // GrabGod grab god
    rpc GrabGods(GrabGodsReq) returns (stream GrabGodsResp) {}

    // 查大神是否有漏单
    rpc Leak(LeakReq) returns (LeakResp) {}

    // Prices 批量查价格
    rpc Prices(PricesReq) returns (PricesResp) {}

    // Serving 服务中的单子
    rpc Serving(ServingReq) returns (ServingResp) {}
}